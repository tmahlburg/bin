#!/bin/sh

## Alpine Linux sysinfo script
## dependencies: curl figlet
## author: tmahlburg
## license: GPLv3

# get kernel version via uname
get_kernel_ver () {
    local kernel
    kernel=$(uname -r)
    echo "$kernel"
}

# get OS version via /etc/issue
get_os_ver () {
    local os_ver
    os_ver=$(grep "Alpine Linux" /etc/issue)
    os_ver=${os_ver#*Linux }
    echo "$os_ver"
}

# get newest OS version via curl from the "latest-releses.yaml" file of the alpine download mirror server
get_os_ver_newest () {
    local os_ver_newest
    os_ver_newest=$(curl -s http://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/aarch64/latest-releases.yaml | \
                    grep "version: " | \
                    tail -1)
    os_ver_newest=${os_ver_newest#*: }
    os_ver_newest=${os_ver_newest%.*}
    echo "$os_ver_newest"
}

# get free RAM in MiB via free command
get_free_ram () {
    local free_ram
    free_ram=$(free -m | grep Mem | tr -s ' ' | cut -d ' ' -f7)
    free_ram=${free_ram%.*}
    echo "$free_ram"
}

# get used RAM in MiB via free command
get_used_ram () {
    local used_ram
    used_ram=$(free -m | grep Mem | tr -s ' ' | cut -d ' ' -f3)
    used_ram=${used_ram%.*}
    echo "$used_ram"
}

# get cpu_temp in degrees, read from /sys/class/thermal/thermal_zone*/temp
get_cpu_temp () {
    local cpu_temp
    cpu_temp=$(cat /sys/class/thermal/thermal_zone*/temp)
    cpu_temp=$((cpu_temp / 1000))
    echo "$cpu_temp"
}

# get uptime via uptime command
get_uptime () {
    local uptime
    uptime=$(uptime)
    uptime=${uptime#*up }
    uptime=${uptime%, l*}
    echo "$uptime"
}

# get service status via rc-status
# arguments: $1 - service name
get_srv_status () {
	local srv
	srv="$1"
	local status
	if rc-status -c | grep -q "$srv" ; then
		status="crashed"
	elif rc-status | grep -q "$srv" ; then
		status="running"
	else
		status="not running"
	fi
	echo "$status"
}

# get free space in human readible format on the external drive via df
get_free_hdd () {
    local free_hdd
    free_hdd=$(df -h /dev/disk/by-uuid/7484F93584F8FA86 | awk 'FNR == 2 {print $4}')
    echo "$free_hdd"
}

# get shell in use via $SHELL
get_shell () {
    local shell
    shell=${SHELL#*bin/}
    echo "$shell"
}

# get hostname via hostname command
get_hostname () {
    local hostname
    hostname=$(hostname)
    echo "$hostname"
}

# prints a nice header with figlet
print_header () {
    figlet -w 120 -f /home/tillm/sblood.flf "Alpine Linux"
}

# get the local ip via the ip route and the cut command
get_local_ip () {
    local localip
#    localip=$(ip route get 1 | cut -d ' ' -f 8)
    localip=$(ifconfig eth0 | grep -i mask | awk '{print $2}'| cut -f2 -d:)
    echo "$localip"
}

# get mullvad connection status
get_mullvad_status () {
    local mullvad_status
    mullvad_status="$(curl -s https://am.i.mullvad.net/connected | awk  'BEGIN{RS="\\. "}1')"
    echo "$mullvad_status"
}

main () {
    # set colors
    local red
    red='\033[0;31m'
    local yellow
    yellow='\033[1;33m'
    local green
    green='\033[0;32m'
    local blue
    blue='\033[0;34m'
    local no_color
    no_color='\033[0m'

    # print the info !
    echo ""
    printf "${blue}%s${no_color}\n" "$(print_header)"
    local os_ver
    os_ver=$(get_os_ver)
    echo "Alpine Linx $os_ver"
    # check, if newest version
    local os_ver_newest
    os_ver_newest=$(get_os_ver_newest)
    local color
    if [ "${os_ver_newest%%.*}" -ne "${os_ver%%.*}" ]; then
       color=$red
    elif [ "${os_ver_newest#*.}" -ne "${os_ver#*.}" ]; then
        color=$yellow
    else
        color=$green
    fi
    printf "Newest version: ${color}%s${no_color}\n" "${os_ver_newest}"
    echo "Kernel: $(get_kernel_ver)"
    echo "Hostname: $(get_hostname)"
    echo "Local IP: $(get_local_ip)"
    echo "$(get_mullvad_status)"
    echo "Uptime: $(get_uptime)"
    echo "Shell: $(get_shell)"
    echo "CPU temp: $(get_cpu_temp)Â°C"
    echo "RAM in use: $(get_used_ram)MiB"
    echo "RAM free: $(get_free_ram)MiB"
    echo "HDD free: $(get_free_hdd)iB"
    # check smb status
    local smb_status
    smb_status=$(get_srv_status samba)
    case "$smb_status" in
        "running" )     color=$green ;;
        "crashed" )     color=$red ;;
        * )             color=$yellow ;;
    esac
    printf "SMB status: ${color}%s${no_color}\n" "${smb_status}"
    local sshd_status
    sshd_status=$(get_srv_status sshd)
    case "$sshd_status" in
        "running" )     color=$green ;;
        "crashed" )     color=$red ;;
        * )             color=$yellow ;;
    esac
    printf "SSHD status: ${color}%s${no_color}\n" "${sshd_status}"
    local openvpn_status
    openvpn_status=$(get_srv_status openvpn)
    case "$openvpn_status" in
        "running" )     color=$green ;;
        "crashed" )     color=$red ;;
        * )             color=$yellow ;;
    esac
    printf "OpenVPN status: ${color}%s${no_color}\n" "${openvpn_status}"
}
main
